######### single cell sequencing of HFpEF ##########

library(dplyr)
library(Seurat)
library(stringr)
#load gene information
gene_info <- read.csv("/data/rawdata/HF/HFpEF/gene_info.csv", row.names = 1)
gene_info$Gene_new <- as.character(gene_info$Gene_Name)
gene_info$Gene_new[55494:55502] <- rownames(gene_info[55494:55502,])
length(which(duplicated(gene_info$Gene_new)))
gene_info$Gene_new[which(duplicated(gene_info$Gene_new))] <- paste(gene_info$Gene_new[which(duplicated(gene_info$Gene_new))], gene_info$Gene_Length[which(duplicated(gene_info$Gene_new))], sep = ".")
length(which(duplicated(gene_info$Gene_new)))

#read data
exp_mtx_files = list.files(path = '/data/rawdata/HF/HFpEF',pattern = "*_genematrix.csv", full.names = TRUE)
# WellList_files = list.files(path = '/data/rawdata/HF/HFpEF',pattern = "*_FD_WellList.TXT", full.names = TRUE)
Well_briefinfo_files = list.files(path = '/data/rawdata/HF/HFpEF',pattern = "*_all.csv", full.names = TRUE)

for (i in 1:length(exp_mtx_files)) {
  exp_mtx <- as.matrix(read.csv(exp_mtx_files[i], header = T, row.names = 1))
  chip_idx <- str_sub(exp_mtx_files[i], 21,26)
  Well_briefinfo <- read.csv(Well_briefinfo_files[i], header = F)
  colnames(Well_briefinfo) <- c("Barcode", "Cell_info", "Counts")
  Well_briefinfo <- Well_briefinfo[1:ncol(exp_mtx),]
  rownames(Well_briefinfo) <- Well_briefinfo$Barcode
  Well_briefinfo$Barcode_new <- paste(Well_briefinfo$Barcode, Well_briefinfo$Cell_info, chip_idx, sep = "_")
  colnames(exp_mtx) <- Well_briefinfo[colnames(exp_mtx),"Barcode_new"]
  rownames(Well_briefinfo) <- Well_briefinfo$Barcode_new
  rownames(exp_mtx) <- gene_info[rownames(exp_mtx),"Gene_new"]
  Well_briefinfo <- Well_briefinfo[-which(Well_briefinfo$Cell_info%in% c("Pos_Ctrl", "Neg_Ctrl")),]
  exp_mtx <- exp_mtx[,rownames(Well_briefinfo)]
  seur <- CreateSeuratObject(exp_mtx, project = "HFpEF_CM", meta.data = Well_briefinfo)
  seur$chip_idx <- chip_idx
  if(!exists('HFpEF')){
    HFpEF = seur
  } else{
    HFpEF = merge(HFpEF, seur)
  }
}

HFpEF <- subset(HFpEF, nFeature_RNA > 500)
VlnPlot(HFpEF, features = "nFeature_RNA")

## add meta
WellList_files = list.files(path = '/data/rawdata/HF/HFpEF',pattern = "*_FD_WellList.TXT", full.names = TRUE)

WellList_combine <- NULL
for (i in 1:length(WellList_files)) {
  chip_idx <- str_sub(WellList_files[i], 21,26)
  WellList <- read.table(WellList_files[i], sep = "\t", header = T)
  WellList$Barcode1 <- paste0(str_sub(WellList$Barcode, 1,8), str_sub(WellList$Barcode, 10,17))
  WellList$Barcode_new <- paste(WellList$Barcode1, WellList$Sample, chip_idx, sep = "_")
  WellList_combine <- rbind(WellList_combine, WellList)
}

rownames(WellList_combine) <- WellList_combine$Barcode_new
WellList_sub <- WellList_combine[colnames(HFpEF),]
HFpEF <- AddMetaData(HFpEF, WellList_sub)
table(HFpEF$State)
saveRDS(HFpEF, file = "HFpEF.rds")

HFpEF[['percent.mt']] = PercentageFeatureSet(HFpEF, pattern = '^mt-')
HFpEF[['percent.ribo']] = PercentageFeatureSet(HFpEF, pattern = '^Rp[sl]')+1
VlnPlot(HFpEF, features = c("percent.ribo", "percent.mt", "nCount_RNA", "nFeature_RNA"), ncol = 2)
mt.percent <- HFpEF$percent.mt
mt.percent.1.5sd.high <- mean(mt.percent) + 1.5*sd(mt.percent)
mt.percent.1.5sd.low <- mean(mt.percent) - 1.5*sd(mt.percent)
HFpEF <- subset(HFpEF, State == "Good"&(percent.mt > mt.percent.1.5sd.low)&(percent.mt < mt.percent.1.5sd.high))

rownames(HFpEF)[grep("mt-", rownames(HFpEF))[-1]]
HFpEF[["RNA_noMT"]] <- CreateAssayObject(counts = HFpEF@assays$RNA@counts[-grep("mt-", rownames(HFpEF))[-1],], )
DefaultAssay(HFpEF) <- "RNA_noMT"
HFpEF <- NormalizeData(HFpEF, scale.factor = 10000)

HFpEF = FindVariableFeatures(HFpEF)
all.genes = rownames(HFpEF)
HFpEF = ScaleData(HFpEF, features = all.genes)
HFpEF = RunPCA(HFpEF, features = VariableFeatures(HFpEF))
HFpEF = FindNeighbors(HFpEF, dims = 1:50)
HFpEF = FindClusters(HFpEF, resolution = .3)
HFpEF = RunUMAP(HFpEF, dims = 1:30)
DimPlot(HFpEF, group.by = "Cell_info")
saveRDS(HFpEF, file = "HFpEF.rds")



########### Intergrative HFpEF and HFrEF single cell sequencing project ###########

library(Seurat)
library(dplyr)
HFrEF <- read.csv("GSE120064_TAC_raw_umi_matrix.csv", row.names = 1)

HFrEF_meta <- read.table("GSE120064_TAC_clean_cell_info_summary.txt", row.names = 1, header = T)
HFrEF <- CreateSeuratObject(counts = HFrEF, meta.data = HFrEF_meta, project = "HFrEF_LW")
HFpEF$Model <- "HFpEF"
DefaultAssay(HFrEF) <- "RNA"
HFrEF[['percent.mt']] = PercentageFeatureSet(HFrEF, pattern = '^mt-')
HFrEF$Model <- "HFrEF"
mt.percent <- HFrEF$percent.mt
mt.percent.1.5sd.high <- mean(mt.percent) + 1.5*sd(mt.percent)
mt.percent.1.5sd.low <- mean(mt.percent) - 1.5*sd(mt.percent)
HFrEF <- subset(HFrEF, (percent.mt > mt.percent.1.5sd.low)&(percent.mt < mt.percent.1.5sd.high))

HFrEF.rm.list <- c(grep("Hba",rownames(HFrEF)),
                 grep("Hbb",rownames(HFrEF)),
                 grep("mt-",rownames(HFrEF)))
HFrEF[["RNA_cv"]] <- CreateAssayObject(counts = as.matrix(HFrEF@assays$RNA@counts)[-TAC.rm.list,])
DefaultAssay(HFpEF)<-"RNA"
HFpEF.rm.list <- c(grep("mt-",rownames(HFpEF)),
                 grep("Hba",rownames(HFpEF)),
                 grep("Hbb",rownames(HFpEF)))
HFpEF[["RNA_cv"]] <- CreateAssayObject(counts = as.matrix(HFpEF@assays$RNA@counts)[-HFpEF.rm.list,])
DefaultAssay(HFpEF) <- "RNA_cv"
DefaultAssay(HFrEF) <- "RNA_cv"
HFpEF <- NormalizeData(HFpEF)
HFrEF <- NormalizeData(HFrEF)
HFpEF = FindVariableFeatures(HFpEF)
HFrEF = FindVariableFeatures(HFrEF)

HFrEF[["RNA_cv"]] <- CreateAssayObject(counts = as.matrix(HFrEF@assays$RNA@counts)[-HFrEF.rm.list,])
DefaultAssay(HFpEF)<-"RNA"
HFpEF.rm.list <- c(grep("mt-",rownames(HFpEF)),
                 grep("Hba",rownames(HFpEF)),
                 grep("Hbb",rownames(HFpEF)))
HFpEF[["RNA_cv"]] <- CreateAssayObject(counts = as.matrix(HFpEF@assays$RNA@counts)[-HFpEF.rm.list,])
DefaultAssay(HFpEF) <- "RNA_cv"
DefaultAssay(HFrEF) <- "RNA_cv"
HFpEF <- NormalizeData(HFpEF)
HFrEF <- NormalizeData(HFrEF)
HFpEF = FindVariableFeatures(HFpEF)
HFrEF = FindVariableFeatures(HFrEF)
features <- SelectIntegrationFeatures(object.list = c(HFpEF,HFrEF))
rm(S)
S.anchors = FindIntegrationAnchors(c(HFpEF,HFrEF), dims = 1:30, anchor.features = features)
S = IntegrateData(S.anchors, dims = 1:30)
DefaultAssay(S) <- "RNA"
DefaultAssay(S) <- "integrated"


S[['percent.mt']] = PercentageFeatureSet(S, pattern = '^mt-')

VlnPlot(S, features = "percent.mt", group.by = "Model")
S = FindVariableFeatures(S)
all.genes = rownames(S)
# S = ScaleData(S, features = all.genes)
S = ScaleData(S, verbose = FALSE)
S = RunPCA(S, npcs = 30, verbose = FALSE)
ElbowPlot(S)

JackStrawPlot(S,reduction = "pca",dims = 1:20)

S = FindNeighbors(S, dims = 1:30)
S = FindClusters(S, resolution = .1)
S = RunUMAP(S, dims = 1:20)
S = RunTSNE(S, dims = 1:15)

# Idents(S) <- "annot"
DimPlot(S)
DimPlot(S, reduction = "tsne")
table(S$CellType)
table(S$Model)
DimPlot(S, group.by = "CellType", split.by = "orig.ident")
DimPlot(S, group.by = "CM", split.by = "orig.ident")
S$Model <- S$orig.ident
S$Model[which(S$orig.ident == "SC")] <- "HFrEF"
DimPlot(S, group.by = "CellType", split.by = "Model")
DimPlot(S, group.by = "CM", split.by = "Model")

table(S$condition)

S$stim <- "HFrEF_Control"
S$stim[which(S$Batch %in% c("C1","C2", "C3"))] <- "HFpEF_Control"
S$stim[which(S$Batch %in% c("E1","E2", "E3"))] <- "HFpEF"
S$stim[which(S$condition != "0w")] <- "HFrEF"
DimPlot(S, group.by = "condition", split.by = "Model")
DimPlot(S, group.by = "stim", split.by = "Model")
table(S$State)
table(S$orig.ident)
save(list =ls(), file = "Integrative_HF.RData")



##########################################################
################# cell type annotation ###################
##########################################################
DimPlot(S)
library(clustree)
res_tree = c(0,.03,.06,.12,.2,.3,.4,.5,.8,1,2,3)
for (i in res_tree) {
  S = FindClusters(S, resolution = i,graph.name = )
}

res_tree_data = S[[paste('integrated_snn_res.', res_tree, sep = '')]]
clustree(res_tree_data, prefix = 'integrated_snn_res.')
DimPlot(S, group.by = "integrated_snn_res.0.8", label = T, label.size = 6)

DefaultAssay(S) <- "RNA_cv"
FeaturePlot(S, features = c("Tnnt2", "Tnni3", "Pecam1", "Cdh5", "Col1a1", "Pdgfrb", "Ptprc", "Npr3", "Cd8a", "Cd3e","Cd68", "Tek"), ncol = 3)
FeaturePlot(S, features = c("Tnnt2", "Tnni3", "Pecam1", "Cdh5", "Col1a1", "Pdgfrb", "Ptprc", "Npr3", "Cd19", "Cd3g","Cd68", "Tek"), ncol = 3)

S$annot <- "CM"
S$annot[which(S$integrated_snn_res.0.8 %in% c(4,18))] <- "EC"
S$annot[which(S$integrated_snn_res.0.8 %in% c(11))] <- "T"
S$annot[which(S$integrated_snn_res.0.8 %in% c(14))] <- "GN"
S$annot[which(S$integrated_snn_res.0.8 %in% c(3,15,17))] <- "MP"
S$annot[which(S$integrated_snn_res.0.8 %in% c(2,10,19))] <- "FB"
S$annot[which(S$integrated_snn_res.0.8 %in% c(6,9))] <- "FB"
S$annot[which(S$integrated_snn_res.0.8 %in% c(12))] <- "EcC" #endocardial cells
# S$annot[which(S$integrated_snn_res.0.8 %in% c(6))] <- "Hbb_high"
S$annot[which(S$integrated_snn_res.0.8 %in% c(16))] <- "B"
DimPlot(S, group.by = "annot", label = 6)

save(list =ls(), file = "Integrative_HF_celltype.RData")


######## Fig 1B #############
Ident(S) <- "annot"
Dimplot(S,group.by	= "annot", label = 6)


######## Fig 1C #############
Ident(S) <- "annot"
Dotplot(S,features = c("Cd79a","Cd79b","Ly6d","Tnnc1","Actn2","Myh6","Fabp4","Cdh5","Pecam1","Ece1","Tm4sf1","Vwf","Col1a2","Dpt","Col3a1","S100a8","S100a9","Hbb-bt","Hba-a2","Hbb-bs","Ctss","C1qa","Cd68","Cd3d","Cd3e","Cd3g"))


#### The drawing was subsequently completed using Excel software. #######